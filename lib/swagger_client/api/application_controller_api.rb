=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class ApplicationControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel pipeline
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason reason
    # @return [Hash<String, Object>]
    def cancel_pipeline_using_put(id, opts = {})
      data, _status_code, _headers = cancel_pipeline_using_put_with_http_info(id, opts)
      data
    end

    # Cancel pipeline
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason reason
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def cancel_pipeline_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.cancel_pipeline_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationControllerApi.cancel_pipeline_using_put"
      end
      # resource path
      local_var_path = '/applications/{application}/pipelines/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'reason'] = opts[:'reason'] if !opts[:'reason'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#cancel_pipeline_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def cancel_task_using_put(id, opts = {})
      data, _status_code, _headers = cancel_task_using_put_with_http_info(id, opts)
      data
    end

    # Cancel task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def cancel_task_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.cancel_task_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationControllerApi.cancel_task_using_put"
      end
      # resource path
      local_var_path = '/applications/{application}/tasks/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#cancel_task_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account filters results to only include applications deployed in the specified account
    # @option opts [String] :owner filteres results to only include applications owned by the specified email
    # @return [Array<Object>]
    def get_all_applications_using_get(opts = {})
      data, _status_code, _headers = get_all_applications_using_get_with_http_info(opts)
      data
    end

    # Retrieve a list of applications
    # @param [Hash] opts the optional parameters
    # @option opts [String] :account filters results to only include applications deployed in the specified account
    # @option opts [String] :owner filteres results to only include applications owned by the specified email
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_all_applications_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_all_applications_using_get ...'
      end
      # resource path
      local_var_path = '/applications'

      # query parameters
      query_params = {}
      query_params[:'account'] = opts[:'account'] if !opts[:'account'].nil?
      query_params[:'owner'] = opts[:'owner'] if !opts[:'owner'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_all_applications_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of an application's configuration revision history
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit limit (default to 20)
    # @return [Array<Object>]
    def get_application_history_using_get(application, opts = {})
      data, _status_code, _headers = get_application_history_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve a list of an application&#39;s configuration revision history
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit limit
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_application_history_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_application_history_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_application_history_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/history'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_application_history_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve an application's details
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand expand (default to true)
    # @return [Hash<String, Object>]
    def get_application_using_get(application, opts = {})
      data, _status_code, _headers = get_application_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve an application&#39;s details
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :expand expand
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_application_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_application_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_application_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_application_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a pipeline configuration
    # @param application application
    # @param pipeline_name pipelineName
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_pipeline_config_using_get(application, pipeline_name, opts = {})
      data, _status_code, _headers = get_pipeline_config_using_get_with_http_info(application, pipeline_name, opts)
      data
    end

    # Retrieve a pipeline configuration
    # @param application application
    # @param pipeline_name pipelineName
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_pipeline_config_using_get_with_http_info(application, pipeline_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_pipeline_config_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_pipeline_config_using_get"
      end
      # verify the required parameter 'pipeline_name' is set
      if @api_client.config.client_side_validation && pipeline_name.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_name' when calling ApplicationControllerApi.get_pipeline_config_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/pipelineConfigs/{pipelineName}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'pipelineName' + '}', pipeline_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_pipeline_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of an application's pipeline configurations
    # @param application application
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_pipeline_configs_for_application_using_get(application, opts = {})
      data, _status_code, _headers = get_pipeline_configs_for_application_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve a list of an application&#39;s pipeline configurations
    # @param application application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_pipeline_configs_for_application_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_pipeline_configs_for_application_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_pipeline_configs_for_application_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/pipelineConfigs'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_pipeline_configs_for_application_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of an application's pipeline executions
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit limit
    # @option opts [String] :statuses statuses
    # @option opts [BOOLEAN] :expand expand
    # @return [Array<Object>]
    def get_pipelines_using_get(application, opts = {})
      data, _status_code, _headers = get_pipelines_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve a list of an application&#39;s pipeline executions
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit limit
    # @option opts [String] :statuses statuses
    # @option opts [BOOLEAN] :expand expand
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_pipelines_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_pipelines_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_pipelines_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/pipelines'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'expand'] = opts[:'expand'] if !opts[:'expand'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_pipelines_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a pipeline strategy configuration
    # @param application application
    # @param strategy_name strategyName
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_strategy_config_using_get(application, strategy_name, opts = {})
      data, _status_code, _headers = get_strategy_config_using_get_with_http_info(application, strategy_name, opts)
      data
    end

    # Retrieve a pipeline strategy configuration
    # @param application application
    # @param strategy_name strategyName
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_strategy_config_using_get_with_http_info(application, strategy_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_strategy_config_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_strategy_config_using_get"
      end
      # verify the required parameter 'strategy_name' is set
      if @api_client.config.client_side_validation && strategy_name.nil?
        fail ArgumentError, "Missing the required parameter 'strategy_name' when calling ApplicationControllerApi.get_strategy_config_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/strategyConfigs/{strategyName}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'strategyName' + '}', strategy_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_strategy_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of an application's pipeline strategy configurations
    # @param application application
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_strategy_configs_for_application_using_get(application, opts = {})
      data, _status_code, _headers = get_strategy_configs_for_application_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve a list of an application&#39;s pipeline strategy configurations
    # @param application application
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_strategy_configs_for_application_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_strategy_configs_for_application_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_strategy_configs_for_application_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/strategyConfigs'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_strategy_configs_for_application_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get task details
    # @param id id
    # @param task_details_id taskDetailsId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Hash<String, Object>]
    def get_task_details_using_get(id, task_details_id, opts = {})
      data, _status_code, _headers = get_task_details_using_get_with_http_info(id, task_details_id, opts)
      data
    end

    # Get task details
    # @param id id
    # @param task_details_id taskDetailsId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_task_details_using_get_with_http_info(id, task_details_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_task_details_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationControllerApi.get_task_details_using_get"
      end
      # verify the required parameter 'task_details_id' is set
      if @api_client.config.client_side_validation && task_details_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_details_id' when calling ApplicationControllerApi.get_task_details_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/tasks/{id}/details/{taskDetailsId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'taskDetailsId' + '}', task_details_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-RateLimit-App'] = opts[:'x_rate_limit_app'] if !opts[:'x_rate_limit_app'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_task_details_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_task_using_get(id, opts = {})
      data, _status_code, _headers = get_task_using_get_with_http_info(id, opts)
      data
    end

    # Get task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_task_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_task_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ApplicationControllerApi.get_task_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/tasks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_task_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of an application's tasks
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page
    # @option opts [Integer] :limit limit
    # @option opts [String] :statuses statuses
    # @return [Array<Object>]
    def get_tasks_using_get(application, opts = {})
      data, _status_code, _headers = get_tasks_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve a list of an application&#39;s tasks
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :page page
    # @option opts [Integer] :limit limit
    # @option opts [String] :statuses statuses
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_tasks_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.get_tasks_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.get_tasks_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/tasks'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#get_tasks_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Invoke pipeline config
    # @param application application
    # @param pipeline_name pipelineName
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :trigger trigger
    # @option opts [String] :user user
    # @return [HttpEntity]
    def invoke_pipeline_config_using_post(application, pipeline_name, opts = {})
      data, _status_code, _headers = invoke_pipeline_config_using_post_with_http_info(application, pipeline_name, opts)
      data
    end

    # Invoke pipeline config
    # @param application application
    # @param pipeline_name pipelineName
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :trigger trigger
    # @option opts [String] :user user
    # @return [Array<(HttpEntity, Fixnum, Hash)>] HttpEntity data, response status code and response headers
    def invoke_pipeline_config_using_post_with_http_info(application, pipeline_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.invoke_pipeline_config_using_post ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.invoke_pipeline_config_using_post"
      end
      # verify the required parameter 'pipeline_name' is set
      if @api_client.config.client_side_validation && pipeline_name.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_name' when calling ApplicationControllerApi.invoke_pipeline_config_using_post"
      end
      # resource path
      local_var_path = '/applications/{application}/pipelineConfigs/{pipelineName}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'pipelineName' + '}', pipeline_name.to_s)

      # query parameters
      query_params = {}
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'trigger'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HttpEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#invoke_pipeline_config_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create task
    # @param application application
    # @param map map
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def task_using_post(application, map, opts = {})
      data, _status_code, _headers = task_using_post_with_http_info(application, map, opts)
      data
    end

    # Create task
    # @param application application
    # @param map map
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def task_using_post_with_http_info(application, map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApplicationControllerApi.task_using_post ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling ApplicationControllerApi.task_using_post"
      end
      # verify the required parameter 'map' is set
      if @api_client.config.client_side_validation && map.nil?
        fail ArgumentError, "Missing the required parameter 'map' when calling ApplicationControllerApi.task_using_post"
      end
      # resource path
      local_var_path = '/applications/{application}/tasks'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(map)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApplicationControllerApi#task_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
