=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class SnapshotControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get current snapshot
    # @param application application
    # @param account account
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_current_snapshot_using_get(application, account, opts = {})
      data, _status_code, _headers = get_current_snapshot_using_get_with_http_info(application, account, opts)
      data
    end

    # Get current snapshot
    # @param application application
    # @param account account
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_current_snapshot_using_get_with_http_info(application, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnapshotControllerApi.get_current_snapshot_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling SnapshotControllerApi.get_current_snapshot_using_get"
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling SnapshotControllerApi.get_current_snapshot_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/snapshots/{account}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotControllerApi#get_current_snapshot_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get snapshot history
    # @param application application
    # @param account account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit limit (default to 20)
    # @return [Array<Object>]
    def get_snapshot_history_using_get(application, account, opts = {})
      data, _status_code, _headers = get_snapshot_history_using_get_with_http_info(application, account, opts)
      data
    end

    # Get snapshot history
    # @param application application
    # @param account account
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit limit
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_snapshot_history_using_get_with_http_info(application, account, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SnapshotControllerApi.get_snapshot_history_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling SnapshotControllerApi.get_snapshot_history_using_get"
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling SnapshotControllerApi.get_snapshot_history_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/snapshots/{account}/history'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'account' + '}', account.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SnapshotControllerApi#get_snapshot_history_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
