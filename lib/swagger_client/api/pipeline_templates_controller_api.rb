=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class PipelineTemplatesControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a pipeline template.
    # @param pipeline_template pipelineTemplate
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_using_post(pipeline_template, opts = {})
      create_using_post_with_http_info(pipeline_template, opts)
      nil
    end

    # Create a pipeline template.
    # @param pipeline_template pipelineTemplate
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def create_using_post_with_http_info(pipeline_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.create_using_post ...'
      end
      # verify the required parameter 'pipeline_template' is set
      if @api_client.config.client_side_validation && pipeline_template.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_template' when calling PipelineTemplatesControllerApi.create_using_post"
      end
      # resource path
      local_var_path = '/pipelineTemplates'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pipeline_template)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#create_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a pipeline template.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :application application
    # @return [Hash<String, Object>]
    def delete_using_delete(id, opts = {})
      data, _status_code, _headers = delete_using_delete_with_http_info(id, opts)
      data
    end

    # Delete a pipeline template.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :application application
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def delete_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.delete_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineTemplatesControllerApi.delete_using_delete"
      end
      # resource path
      local_var_path = '/pipelineTemplates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'application'] = opts[:'application'] if !opts[:'application'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#delete_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a pipeline template.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_using_get(id, opts = {})
      data, _status_code, _headers = get_using_get_with_http_info(id, opts)
      data
    end

    # Get a pipeline template.
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.get_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineTemplatesControllerApi.get_using_get"
      end
      # resource path
      local_var_path = '/pipelineTemplates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#get_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all pipelines that implement a pipeline template
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :recursive recursive
    # @return [Array<Object>]
    def list_pipeline_template_dependents_using_get(id, opts = {})
      data, _status_code, _headers = list_pipeline_template_dependents_using_get_with_http_info(id, opts)
      data
    end

    # List all pipelines that implement a pipeline template
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :recursive recursive
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def list_pipeline_template_dependents_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.list_pipeline_template_dependents_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineTemplatesControllerApi.list_pipeline_template_dependents_using_get"
      end
      # resource path
      local_var_path = '/pipelineTemplates/{id}/dependents'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'recursive'] = opts[:'recursive'] if !opts[:'recursive'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#list_pipeline_template_dependents_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List pipeline templates.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :scopes scopes
    # @return [Array<Object>]
    def list_using_get(opts = {})
      data, _status_code, _headers = list_using_get_with_http_info(opts)
      data
    end

    # List pipeline templates.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :scopes scopes
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def list_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.list_using_get ...'
      end
      # resource path
      local_var_path = '/pipelineTemplates'

      # query parameters
      query_params = {}
      query_params[:'scopes'] = @api_client.build_collection_param(opts[:'scopes'], :multi) if !opts[:'scopes'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#list_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resolve a pipeline template.
    # @param source source
    # @param [Hash] opts the optional parameters
    # @option opts [String] :execution_id executionId
    # @option opts [String] :pipeline_config_id pipelineConfigId
    # @return [Hash<String, Object>]
    def resolve_templates_using_get(source, opts = {})
      data, _status_code, _headers = resolve_templates_using_get_with_http_info(source, opts)
      data
    end

    # Resolve a pipeline template.
    # @param source source
    # @param [Hash] opts the optional parameters
    # @option opts [String] :execution_id executionId
    # @option opts [String] :pipeline_config_id pipelineConfigId
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def resolve_templates_using_get_with_http_info(source, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.resolve_templates_using_get ...'
      end
      # verify the required parameter 'source' is set
      if @api_client.config.client_side_validation && source.nil?
        fail ArgumentError, "Missing the required parameter 'source' when calling PipelineTemplatesControllerApi.resolve_templates_using_get"
      end
      # resource path
      local_var_path = '/pipelineTemplates/resolve'

      # query parameters
      query_params = {}
      query_params[:'source'] = source
      query_params[:'executionId'] = opts[:'execution_id'] if !opts[:'execution_id'].nil?
      query_params[:'pipelineConfigId'] = opts[:'pipeline_config_id'] if !opts[:'pipeline_config_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#resolve_templates_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a pipeline template.
    # @param id id
    # @param pipeline_template pipelineTemplate
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_plan_dependents skipPlanDependents (default to false)
    # @return [nil]
    def update_using_post(id, pipeline_template, opts = {})
      update_using_post_with_http_info(id, pipeline_template, opts)
      nil
    end

    # Update a pipeline template.
    # @param id id
    # @param pipeline_template pipelineTemplate
    # @param [Hash] opts the optional parameters
    # @option opts [BOOLEAN] :skip_plan_dependents skipPlanDependents
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def update_using_post_with_http_info(id, pipeline_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineTemplatesControllerApi.update_using_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineTemplatesControllerApi.update_using_post"
      end
      # verify the required parameter 'pipeline_template' is set
      if @api_client.config.client_side_validation && pipeline_template.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_template' when calling PipelineTemplatesControllerApi.update_using_post"
      end
      # resource path
      local_var_path = '/pipelineTemplates/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'skipPlanDependents'] = opts[:'skip_plan_dependents'] if !opts[:'skip_plan_dependents'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pipeline_template)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineTemplatesControllerApi#update_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
