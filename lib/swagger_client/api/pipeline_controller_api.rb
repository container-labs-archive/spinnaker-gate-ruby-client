=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class PipelineControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason reason
    # @option opts [BOOLEAN] :force force (default to false)
    # @return [nil]
    def cancel_pipeline_using_put1(id, opts = {})
      cancel_pipeline_using_put1_with_http_info(id, opts)
      nil
    end

    # Cancel a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :reason reason
    # @option opts [BOOLEAN] :force force
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def cancel_pipeline_using_put1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.cancel_pipeline_using_put1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.cancel_pipeline_using_put1"
      end
      # resource path
      local_var_path = '/pipelines/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'reason'] = opts[:'reason'] if !opts[:'reason'].nil?
      query_params[:'force'] = opts[:'force'] if !opts[:'force'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#cancel_pipeline_using_put1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a pipeline definition
    # @param application application
    # @param pipeline_name pipelineName
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_pipeline_using_delete(application, pipeline_name, opts = {})
      delete_pipeline_using_delete_with_http_info(application, pipeline_name, opts)
      nil
    end

    # Delete a pipeline definition
    # @param application application
    # @param pipeline_name pipelineName
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_pipeline_using_delete_with_http_info(application, pipeline_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.delete_pipeline_using_delete ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling PipelineControllerApi.delete_pipeline_using_delete"
      end
      # verify the required parameter 'pipeline_name' is set
      if @api_client.config.client_side_validation && pipeline_name.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_name' when calling PipelineControllerApi.delete_pipeline_using_delete"
      end
      # resource path
      local_var_path = '/pipelines/{application}/{pipelineName}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'pipelineName' + '}', pipeline_name.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#delete_pipeline_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def delete_pipeline_using_delete1(id, opts = {})
      data, _status_code, _headers = delete_pipeline_using_delete1_with_http_info(id, opts)
      data
    end

    # Delete a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def delete_pipeline_using_delete1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.delete_pipeline_using_delete1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.delete_pipeline_using_delete1"
      end
      # resource path
      local_var_path = '/pipelines/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#delete_pipeline_using_delete1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_using_delete(id, expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_using_delete_with_http_info(id, expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_using_delete_with_http_info(id, expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_using_delete"
      end
      # verify the required parameter 'expression' is set
      if @api_client.config.client_side_validation && expression.nil?
        fail ArgumentError, "Missing the required parameter 'expression' when calling PipelineControllerApi.evaluate_expression_for_execution_using_delete"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expression'] = expression

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_using_get(id, expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_using_get_with_http_info(id, expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_using_get_with_http_info(id, expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_using_get"
      end
      # verify the required parameter 'expression' is set
      if @api_client.config.client_side_validation && expression.nil?
        fail ArgumentError, "Missing the required parameter 'expression' when calling PipelineControllerApi.evaluate_expression_for_execution_using_get"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expression'] = expression

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_using_head(id, expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_using_head_with_http_info(id, expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_using_head_with_http_info(id, expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_using_head ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_using_head"
      end
      # verify the required parameter 'expression' is set
      if @api_client.config.client_side_validation && expression.nil?
        fail ArgumentError, "Missing the required parameter 'expression' when calling PipelineControllerApi.evaluate_expression_for_execution_using_head"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expression'] = expression

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:HEAD, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_using_head\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_using_options(id, expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_using_options_with_http_info(id, expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_using_options_with_http_info(id, expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_using_options ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_using_options"
      end
      # verify the required parameter 'expression' is set
      if @api_client.config.client_side_validation && expression.nil?
        fail ArgumentError, "Missing the required parameter 'expression' when calling PipelineControllerApi.evaluate_expression_for_execution_using_options"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expression'] = expression

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:OPTIONS, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_using_options\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_using_patch(id, expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_using_patch_with_http_info(id, expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_using_patch_with_http_info(id, expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_using_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_using_patch"
      end
      # verify the required parameter 'expression' is set
      if @api_client.config.client_side_validation && expression.nil?
        fail ArgumentError, "Missing the required parameter 'expression' when calling PipelineControllerApi.evaluate_expression_for_execution_using_patch"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expression'] = expression

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_using_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_using_put(id, expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_using_put_with_http_info(id, expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param expression expression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_using_put_with_http_info(id, expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_using_put"
      end
      # verify the required parameter 'expression' is set
      if @api_client.config.client_side_validation && expression.nil?
        fail ArgumentError, "Missing the required parameter 'expression' when calling PipelineControllerApi.evaluate_expression_for_execution_using_put"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'expression'] = expression

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param pipeline_expression pipelineExpression
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def evaluate_expression_for_execution_via_post_using_post1(id, pipeline_expression, opts = {})
      data, _status_code, _headers = evaluate_expression_for_execution_via_post_using_post1_with_http_info(id, pipeline_expression, opts)
      data
    end

    # Evaluate a pipeline expression using the provided execution as context
    # @param id id
    # @param pipeline_expression pipelineExpression
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def evaluate_expression_for_execution_via_post_using_post1_with_http_info(id, pipeline_expression, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.evaluate_expression_for_execution_via_post_using_post1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.evaluate_expression_for_execution_via_post_using_post1"
      end
      # verify the required parameter 'pipeline_expression' is set
      if @api_client.config.client_side_validation && pipeline_expression.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_expression' when calling PipelineControllerApi.evaluate_expression_for_execution_via_post_using_post1"
      end
      # resource path
      local_var_path = '/pipelines/{id}/evaluateExpression'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pipeline_expression)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#evaluate_expression_for_execution_via_post_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve pipeline execution logs
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_pipeline_logs_using_get(id, opts = {})
      data, _status_code, _headers = get_pipeline_logs_using_get_with_http_info(id, opts)
      data
    end

    # Retrieve pipeline execution logs
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_pipeline_logs_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.get_pipeline_logs_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.get_pipeline_logs_using_get"
      end
      # resource path
      local_var_path = '/pipelines/{id}/logs'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#get_pipeline_logs_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def get_pipeline_using_get(id, opts = {})
      data, _status_code, _headers = get_pipeline_using_get_with_http_info(id, opts)
      data
    end

    # Retrieve a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_pipeline_using_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.get_pipeline_using_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.get_pipeline_using_get"
      end
      # resource path
      local_var_path = '/pipelines/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#get_pipeline_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Trigger a pipeline execution
    # @param application application
    # @param pipeline_name_or_id pipelineNameOrId
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :trigger trigger
    # @return [HttpEntity]
    def invoke_pipeline_config_using_post1(application, pipeline_name_or_id, opts = {})
      data, _status_code, _headers = invoke_pipeline_config_using_post1_with_http_info(application, pipeline_name_or_id, opts)
      data
    end

    # Trigger a pipeline execution
    # @param application application
    # @param pipeline_name_or_id pipelineNameOrId
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :trigger trigger
    # @return [Array<(HttpEntity, Fixnum, Hash)>] HttpEntity data, response status code and response headers
    def invoke_pipeline_config_using_post1_with_http_info(application, pipeline_name_or_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.invoke_pipeline_config_using_post1 ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling PipelineControllerApi.invoke_pipeline_config_using_post1"
      end
      # verify the required parameter 'pipeline_name_or_id' is set
      if @api_client.config.client_side_validation && pipeline_name_or_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_name_or_id' when calling PipelineControllerApi.invoke_pipeline_config_using_post1"
      end
      # resource path
      local_var_path = '/pipelines/{application}/{pipelineNameOrId}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'pipelineNameOrId' + '}', pipeline_name_or_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'trigger'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HttpEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#invoke_pipeline_config_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Trigger a pipeline execution
    # @param application application
    # @param pipeline_name_or_id pipelineNameOrId
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :trigger trigger
    # @return [HttpEntity]
    def invoke_pipeline_config_via_echo_using_post(application, pipeline_name_or_id, opts = {})
      data, _status_code, _headers = invoke_pipeline_config_via_echo_using_post_with_http_info(application, pipeline_name_or_id, opts)
      data
    end

    # Trigger a pipeline execution
    # @param application application
    # @param pipeline_name_or_id pipelineNameOrId
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :trigger trigger
    # @return [Array<(HttpEntity, Fixnum, Hash)>] HttpEntity data, response status code and response headers
    def invoke_pipeline_config_via_echo_using_post_with_http_info(application, pipeline_name_or_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.invoke_pipeline_config_via_echo_using_post ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling PipelineControllerApi.invoke_pipeline_config_via_echo_using_post"
      end
      # verify the required parameter 'pipeline_name_or_id' is set
      if @api_client.config.client_side_validation && pipeline_name_or_id.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline_name_or_id' when calling PipelineControllerApi.invoke_pipeline_config_via_echo_using_post"
      end
      # resource path
      local_var_path = '/pipelines/v2/{application}/{pipelineNameOrId}'.sub('{' + 'application' + '}', application.to_s).sub('{' + 'pipelineNameOrId' + '}', pipeline_name_or_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'trigger'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'HttpEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#invoke_pipeline_config_via_echo_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Pause a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pause_pipeline_using_put(id, opts = {})
      pause_pipeline_using_put_with_http_info(id, opts)
      nil
    end

    # Pause a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def pause_pipeline_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.pause_pipeline_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.pause_pipeline_using_put"
      end
      # resource path
      local_var_path = '/pipelines/{id}/pause'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#pause_pipeline_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Rename a pipeline definition
    # @param rename_command renameCommand
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def rename_pipeline_using_post(rename_command, opts = {})
      rename_pipeline_using_post_with_http_info(rename_command, opts)
      nil
    end

    # Rename a pipeline definition
    # @param rename_command renameCommand
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def rename_pipeline_using_post_with_http_info(rename_command, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.rename_pipeline_using_post ...'
      end
      # verify the required parameter 'rename_command' is set
      if @api_client.config.client_side_validation && rename_command.nil?
        fail ArgumentError, "Missing the required parameter 'rename_command' when calling PipelineControllerApi.rename_pipeline_using_post"
      end
      # resource path
      local_var_path = '/pipelines/move'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(rename_command)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#rename_pipeline_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Restart a stage execution
    # @param id id
    # @param stage_id stageId
    # @param context context
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def restart_stage_using_put(id, stage_id, context, opts = {})
      data, _status_code, _headers = restart_stage_using_put_with_http_info(id, stage_id, context, opts)
      data
    end

    # Restart a stage execution
    # @param id id
    # @param stage_id stageId
    # @param context context
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def restart_stage_using_put_with_http_info(id, stage_id, context, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.restart_stage_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.restart_stage_using_put"
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling PipelineControllerApi.restart_stage_using_put"
      end
      # verify the required parameter 'context' is set
      if @api_client.config.client_side_validation && context.nil?
        fail ArgumentError, "Missing the required parameter 'context' when calling PipelineControllerApi.restart_stage_using_put"
      end
      # resource path
      local_var_path = '/pipelines/{id}/stages/{stageId}/restart'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'stageId' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(context)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#restart_stage_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Resume a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def resume_pipeline_using_put(id, opts = {})
      data, _status_code, _headers = resume_pipeline_using_put_with_http_info(id, opts)
      data
    end

    # Resume a pipeline execution
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def resume_pipeline_using_put_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.resume_pipeline_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.resume_pipeline_using_put"
      end
      # resource path
      local_var_path = '/pipelines/{id}/resume'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#resume_pipeline_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Save a pipeline definition
    # @param pipeline pipeline
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def save_pipeline_using_post(pipeline, opts = {})
      save_pipeline_using_post_with_http_info(pipeline, opts)
      nil
    end

    # Save a pipeline definition
    # @param pipeline pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def save_pipeline_using_post_with_http_info(pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.save_pipeline_using_post ...'
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling PipelineControllerApi.save_pipeline_using_post"
      end
      # resource path
      local_var_path = '/pipelines'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pipeline)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#save_pipeline_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Initiate a pipeline execution
    # @param map map
    # @param [Hash] opts the optional parameters
    # @return [ResponseEntity]
    def start_using_post(map, opts = {})
      data, _status_code, _headers = start_using_post_with_http_info(map, opts)
      data
    end

    # Initiate a pipeline execution
    # @param map map
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResponseEntity, Fixnum, Hash)>] ResponseEntity data, response status code and response headers
    def start_using_post_with_http_info(map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.start_using_post ...'
      end
      # verify the required parameter 'map' is set
      if @api_client.config.client_side_validation && map.nil?
        fail ArgumentError, "Missing the required parameter 'map' when calling PipelineControllerApi.start_using_post"
      end
      # resource path
      local_var_path = '/pipelines/start'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(map)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ResponseEntity')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#start_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a pipeline definition
    # @param id id
    # @param pipeline pipeline
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def update_pipeline_using_put(id, pipeline, opts = {})
      data, _status_code, _headers = update_pipeline_using_put_with_http_info(id, pipeline, opts)
      data
    end

    # Update a pipeline definition
    # @param id id
    # @param pipeline pipeline
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_pipeline_using_put_with_http_info(id, pipeline, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.update_pipeline_using_put ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.update_pipeline_using_put"
      end
      # verify the required parameter 'pipeline' is set
      if @api_client.config.client_side_validation && pipeline.nil?
        fail ArgumentError, "Missing the required parameter 'pipeline' when calling PipelineControllerApi.update_pipeline_using_put"
      end
      # resource path
      local_var_path = '/pipelines/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pipeline)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#update_pipeline_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update a stage execution
    # @param id id
    # @param stage_id stageId
    # @param context context
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def update_stage_using_patch(id, stage_id, context, opts = {})
      data, _status_code, _headers = update_stage_using_patch_with_http_info(id, stage_id, context, opts)
      data
    end

    # Update a stage execution
    # @param id id
    # @param stage_id stageId
    # @param context context
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_stage_using_patch_with_http_info(id, stage_id, context, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PipelineControllerApi.update_stage_using_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling PipelineControllerApi.update_stage_using_patch"
      end
      # verify the required parameter 'stage_id' is set
      if @api_client.config.client_side_validation && stage_id.nil?
        fail ArgumentError, "Missing the required parameter 'stage_id' when calling PipelineControllerApi.update_stage_using_patch"
      end
      # verify the required parameter 'context' is set
      if @api_client.config.client_side_validation && context.nil?
        fail ArgumentError, "Missing the required parameter 'context' when calling PipelineControllerApi.update_stage_using_patch"
      end
      # resource path
      local_var_path = '/pipelines/{id}/stages/{stageId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'stageId' + '}', stage_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(context)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PipelineControllerApi#update_stage_using_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
