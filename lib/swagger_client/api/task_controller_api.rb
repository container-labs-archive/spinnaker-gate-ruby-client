=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class TaskControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancel task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def cancel_task_using_put1(id, opts = {})
      data, _status_code, _headers = cancel_task_using_put1_with_http_info(id, opts)
      data
    end

    # Cancel task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def cancel_task_using_put1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskControllerApi.cancel_task_using_put1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaskControllerApi.cancel_task_using_put1"
      end
      # resource path
      local_var_path = '/tasks/{id}/cancel'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskControllerApi#cancel_task_using_put1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Cancel tasks
    # @param ids ids
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def cancel_tasks_using_put(ids, opts = {})
      data, _status_code, _headers = cancel_tasks_using_put_with_http_info(ids, opts)
      data
    end

    # Cancel tasks
    # @param ids ids
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def cancel_tasks_using_put_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskControllerApi.cancel_tasks_using_put ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling TaskControllerApi.cancel_tasks_using_put"
      end
      # resource path
      local_var_path = '/tasks/cancel'

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(ids, :multi)

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskControllerApi#cancel_tasks_using_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def delete_task_using_delete(id, opts = {})
      data, _status_code, _headers = delete_task_using_delete_with_http_info(id, opts)
      data
    end

    # Delete task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def delete_task_using_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskControllerApi.delete_task_using_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaskControllerApi.delete_task_using_delete"
      end
      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskControllerApi#delete_task_using_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get task details
    # @param id id
    # @param task_details_id taskDetailsId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Hash<String, Object>]
    def get_task_details_using_get1(id, task_details_id, opts = {})
      data, _status_code, _headers = get_task_details_using_get1_with_http_info(id, task_details_id, opts)
      data
    end

    # Get task details
    # @param id id
    # @param task_details_id taskDetailsId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_task_details_using_get1_with_http_info(id, task_details_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskControllerApi.get_task_details_using_get1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaskControllerApi.get_task_details_using_get1"
      end
      # verify the required parameter 'task_details_id' is set
      if @api_client.config.client_side_validation && task_details_id.nil?
        fail ArgumentError, "Missing the required parameter 'task_details_id' when calling TaskControllerApi.get_task_details_using_get1"
      end
      # resource path
      local_var_path = '/tasks/{id}/details/{taskDetailsId}'.sub('{' + 'id' + '}', id.to_s).sub('{' + 'taskDetailsId' + '}', task_details_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-RateLimit-App'] = opts[:'x_rate_limit_app'] if !opts[:'x_rate_limit_app'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskControllerApi#get_task_details_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_task_using_get1(id, opts = {})
      data, _status_code, _headers = get_task_using_get1_with_http_info(id, opts)
      data
    end

    # Get task
    # @param id id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_task_using_get1_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskControllerApi.get_task_using_get1 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaskControllerApi.get_task_using_get1"
      end
      # resource path
      local_var_path = '/tasks/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskControllerApi#get_task_using_get1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create task
    # @param map map
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def task_using_post1(map, opts = {})
      data, _status_code, _headers = task_using_post1_with_http_info(map, opts)
      data
    end

    # Create task
    # @param map map
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def task_using_post1_with_http_info(map, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaskControllerApi.task_using_post1 ...'
      end
      # verify the required parameter 'map' is set
      if @api_client.config.client_side_validation && map.nil?
        fail ArgumentError, "Missing the required parameter 'map' when calling TaskControllerApi.task_using_post1"
      end
      # resource path
      local_var_path = '/tasks'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(map)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaskControllerApi#task_using_post1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
