=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class V2CanaryControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve a canary result
    # @param canary_config_id canaryConfigId
    # @param canary_execution_id canaryExecutionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_account_name storageAccountName
    # @return [Object]
    def get_canary_result_using_get(canary_config_id, canary_execution_id, opts = {})
      data, _status_code, _headers = get_canary_result_using_get_with_http_info(canary_config_id, canary_execution_id, opts)
      data
    end

    # Retrieve a canary result
    # @param canary_config_id canaryConfigId
    # @param canary_execution_id canaryExecutionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_account_name storageAccountName
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def get_canary_result_using_get_with_http_info(canary_config_id, canary_execution_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.get_canary_result_using_get ...'
      end
      # verify the required parameter 'canary_config_id' is set
      if @api_client.config.client_side_validation && canary_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'canary_config_id' when calling V2CanaryControllerApi.get_canary_result_using_get"
      end
      # verify the required parameter 'canary_execution_id' is set
      if @api_client.config.client_side_validation && canary_execution_id.nil?
        fail ArgumentError, "Missing the required parameter 'canary_execution_id' when calling V2CanaryControllerApi.get_canary_result_using_get"
      end
      # resource path
      local_var_path = '/v2/canaries/canary/{canaryConfigId}/{canaryExecutionId}'.sub('{' + 'canaryConfigId' + '}', canary_config_id.to_s).sub('{' + 'canaryExecutionId' + '}', canary_execution_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageAccountName'] = opts[:'storage_account_name'] if !opts[:'storage_account_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#get_canary_result_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of an application's canary results
    # @param application application
    # @param limit limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :statuses Comma-separated list of statuses, e.g.: RUNNING, SUCCEEDED, TERMINAL
    # @option opts [String] :storage_account_name storageAccountName
    # @return [Array<Object>]
    def get_canary_results_by_application_using_get(application, limit, opts = {})
      data, _status_code, _headers = get_canary_results_by_application_using_get_with_http_info(application, limit, opts)
      data
    end

    # Retrieve a list of an application&#39;s canary results
    # @param application application
    # @param limit limit
    # @param [Hash] opts the optional parameters
    # @option opts [String] :statuses Comma-separated list of statuses, e.g.: RUNNING, SUCCEEDED, TERMINAL
    # @option opts [String] :storage_account_name storageAccountName
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_canary_results_by_application_using_get_with_http_info(application, limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.get_canary_results_by_application_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling V2CanaryControllerApi.get_canary_results_by_application_using_get"
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling V2CanaryControllerApi.get_canary_results_by_application_using_get"
      end
      # resource path
      local_var_path = '/v2/canaries/{application}/executions'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}
      query_params[:'limit'] = limit
      query_params[:'statuses'] = opts[:'statuses'] if !opts[:'statuses'].nil?
      query_params[:'storageAccountName'] = opts[:'storage_account_name'] if !opts[:'storage_account_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#get_canary_results_by_application_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a metric set pair list
    # @param metric_set_pair_list_id metricSetPairListId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_account_name storageAccountName
    # @return [Array<Object>]
    def get_metric_set_pair_list_using_get(metric_set_pair_list_id, opts = {})
      data, _status_code, _headers = get_metric_set_pair_list_using_get_with_http_info(metric_set_pair_list_id, opts)
      data
    end

    # Retrieve a metric set pair list
    # @param metric_set_pair_list_id metricSetPairListId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :storage_account_name storageAccountName
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_metric_set_pair_list_using_get_with_http_info(metric_set_pair_list_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.get_metric_set_pair_list_using_get ...'
      end
      # verify the required parameter 'metric_set_pair_list_id' is set
      if @api_client.config.client_side_validation && metric_set_pair_list_id.nil?
        fail ArgumentError, "Missing the required parameter 'metric_set_pair_list_id' when calling V2CanaryControllerApi.get_metric_set_pair_list_using_get"
      end
      # resource path
      local_var_path = '/v2/canaries/metricSetPairList/{metricSetPairListId}'.sub('{' + 'metricSetPairListId' + '}', metric_set_pair_list_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'storageAccountName'] = opts[:'storage_account_name'] if !opts[:'storage_account_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#get_metric_set_pair_list_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Start a canary execution
    # @param canary_config_id canaryConfigId
    # @param execution_request executionRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :application application
    # @option opts [String] :parent_pipeline_execution_id parentPipelineExecutionId
    # @option opts [String] :metrics_account_name metricsAccountName
    # @option opts [String] :storage_account_name storageAccountName
    # @option opts [String] :configuration_account_name configurationAccountName
    # @return [Object]
    def initiate_canary_using_post(canary_config_id, execution_request, opts = {})
      data, _status_code, _headers = initiate_canary_using_post_with_http_info(canary_config_id, execution_request, opts)
      data
    end

    # Start a canary execution
    # @param canary_config_id canaryConfigId
    # @param execution_request executionRequest
    # @param [Hash] opts the optional parameters
    # @option opts [String] :application application
    # @option opts [String] :parent_pipeline_execution_id parentPipelineExecutionId
    # @option opts [String] :metrics_account_name metricsAccountName
    # @option opts [String] :storage_account_name storageAccountName
    # @option opts [String] :configuration_account_name configurationAccountName
    # @return [Array<(Object, Fixnum, Hash)>] Object data, response status code and response headers
    def initiate_canary_using_post_with_http_info(canary_config_id, execution_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.initiate_canary_using_post ...'
      end
      # verify the required parameter 'canary_config_id' is set
      if @api_client.config.client_side_validation && canary_config_id.nil?
        fail ArgumentError, "Missing the required parameter 'canary_config_id' when calling V2CanaryControllerApi.initiate_canary_using_post"
      end
      # verify the required parameter 'execution_request' is set
      if @api_client.config.client_side_validation && execution_request.nil?
        fail ArgumentError, "Missing the required parameter 'execution_request' when calling V2CanaryControllerApi.initiate_canary_using_post"
      end
      # resource path
      local_var_path = '/v2/canaries/canary/{canaryConfigId}'.sub('{' + 'canaryConfigId' + '}', canary_config_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'application'] = opts[:'application'] if !opts[:'application'].nil?
      query_params[:'parentPipelineExecutionId'] = opts[:'parent_pipeline_execution_id'] if !opts[:'parent_pipeline_execution_id'].nil?
      query_params[:'metricsAccountName'] = opts[:'metrics_account_name'] if !opts[:'metrics_account_name'].nil?
      query_params[:'storageAccountName'] = opts[:'storage_account_name'] if !opts[:'storage_account_name'].nil?
      query_params[:'configurationAccountName'] = opts[:'configuration_account_name'] if !opts[:'configuration_account_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(execution_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Object')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#initiate_canary_using_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of configured Kayenta accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def list_credentials_using_get(opts = {})
      data, _status_code, _headers = list_credentials_using_get_with_http_info(opts)
      data
    end

    # Retrieve a list of configured Kayenta accounts
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def list_credentials_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.list_credentials_using_get ...'
      end
      # resource path
      local_var_path = '/v2/canaries/credentials'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#list_credentials_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of all configured canary judges
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def list_judges_using_get(opts = {})
      data, _status_code, _headers = list_judges_using_get_with_http_info(opts)
      data
    end

    # Retrieve a list of all configured canary judges
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def list_judges_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.list_judges_using_get ...'
      end
      # resource path
      local_var_path = '/v2/canaries/judges'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#list_judges_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of descriptors for use in populating the canary config ui
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @option opts [String] :metrics_account_name metricsAccountName
    # @return [Array<Object>]
    def list_metrics_service_metadata_using_get(opts = {})
      data, _status_code, _headers = list_metrics_service_metadata_using_get_with_http_info(opts)
      data
    end

    # Retrieve a list of descriptors for use in populating the canary config ui
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter filter
    # @option opts [String] :metrics_account_name metricsAccountName
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def list_metrics_service_metadata_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2CanaryControllerApi.list_metrics_service_metadata_using_get ...'
      end
      # resource path
      local_var_path = '/v2/canaries/metadata/metricsService'

      # query parameters
      query_params = {}
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'metricsAccountName'] = opts[:'metrics_account_name'] if !opts[:'metrics_account_name'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2CanaryControllerApi#list_metrics_service_metadata_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
