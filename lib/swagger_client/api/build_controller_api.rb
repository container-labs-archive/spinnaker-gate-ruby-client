=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class BuildControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get build masters
    # Deprecated, use the v3 endpoint instead
    # @param type type
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_build_masters_using_get(type, opts = {})
      data, _status_code, _headers = get_build_masters_using_get_with_http_info(type, opts)
      data
    end

    # Get build masters
    # Deprecated, use the v3 endpoint instead
    # @param type type
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_build_masters_using_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.get_build_masters_using_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BuildControllerApi.get_build_masters_using_get"
      end
      # resource path
      local_var_path = '/v2/builds'

      # query parameters
      query_params = {}
      query_params[:'type'] = type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#get_build_masters_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build for build master
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param number number
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_build_using_get(build_master, number, opts = {})
      data, _status_code, _headers = get_build_using_get_with_http_info(build_master, number, opts)
      data
    end

    # Get build for build master
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param number number
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_build_using_get_with_http_info(build_master, number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.get_build_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.get_build_using_get"
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling BuildControllerApi.get_build_using_get"
      end
      # resource path
      local_var_path = '/v2/builds/{buildMaster}/build/{number}/**'.sub('{' + 'buildMaster' + '}', build_master.to_s).sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#get_build_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get builds for build master
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_builds_using_get(build_master, opts = {})
      data, _status_code, _headers = get_builds_using_get_with_http_info(build_master, opts)
      data
    end

    # Get builds for build master
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_builds_using_get_with_http_info(build_master, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.get_builds_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.get_builds_using_get"
      end
      # resource path
      local_var_path = '/v2/builds/{buildMaster}/builds/**'.sub('{' + 'buildMaster' + '}', build_master.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#get_builds_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get job config
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_job_config_using_get(build_master, opts = {})
      data, _status_code, _headers = get_job_config_using_get_with_http_info(build_master, opts)
      data
    end

    # Get job config
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_job_config_using_get_with_http_info(build_master, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.get_job_config_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.get_job_config_using_get"
      end
      # resource path
      local_var_path = '/v2/builds/{buildMaster}/jobs/**'.sub('{' + 'buildMaster' + '}', build_master.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#get_job_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jobs for build master
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def get_jobs_for_build_master_using_get(build_master, opts = {})
      data, _status_code, _headers = get_jobs_for_build_master_using_get_with_http_info(build_master, opts)
      data
    end

    # Get jobs for build master
    # Deprecated, use the v3 endpoint instead
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_jobs_for_build_master_using_get_with_http_info(build_master, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.get_jobs_for_build_master_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.get_jobs_for_build_master_using_get"
      end
      # resource path
      local_var_path = '/v2/builds/{buildMaster}/jobs'.sub('{' + 'buildMaster' + '}', build_master.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#get_jobs_for_build_master_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build masters
    # @param type type
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def v3_get_build_masters_using_get(type, opts = {})
      data, _status_code, _headers = v3_get_build_masters_using_get_with_http_info(type, opts)
      data
    end

    # Get build masters
    # @param type type
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def v3_get_build_masters_using_get_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.v3_get_build_masters_using_get ...'
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling BuildControllerApi.v3_get_build_masters_using_get"
      end
      # resource path
      local_var_path = '/v3/builds'

      # query parameters
      query_params = {}
      query_params[:'type'] = type

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#v3_get_build_masters_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get build for build master
    # @param build_master buildMaster
    # @param number number
    # @param job job
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def v3_get_build_using_get(build_master, number, job, opts = {})
      data, _status_code, _headers = v3_get_build_using_get_with_http_info(build_master, number, job, opts)
      data
    end

    # Get build for build master
    # @param build_master buildMaster
    # @param number number
    # @param job job
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def v3_get_build_using_get_with_http_info(build_master, number, job, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.v3_get_build_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.v3_get_build_using_get"
      end
      # verify the required parameter 'number' is set
      if @api_client.config.client_side_validation && number.nil?
        fail ArgumentError, "Missing the required parameter 'number' when calling BuildControllerApi.v3_get_build_using_get"
      end
      # verify the required parameter 'job' is set
      if @api_client.config.client_side_validation && job.nil?
        fail ArgumentError, "Missing the required parameter 'job' when calling BuildControllerApi.v3_get_build_using_get"
      end
      # resource path
      local_var_path = '/v3/builds/{buildMaster}/build/{number}'.sub('{' + 'buildMaster' + '}', build_master.to_s).sub('{' + 'number' + '}', number.to_s)

      # query parameters
      query_params = {}
      query_params[:'job'] = job

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#v3_get_build_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get builds for build master
    # @param build_master buildMaster
    # @param job job
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def v3_get_builds_using_get(build_master, job, opts = {})
      data, _status_code, _headers = v3_get_builds_using_get_with_http_info(build_master, job, opts)
      data
    end

    # Get builds for build master
    # @param build_master buildMaster
    # @param job job
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def v3_get_builds_using_get_with_http_info(build_master, job, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.v3_get_builds_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.v3_get_builds_using_get"
      end
      # verify the required parameter 'job' is set
      if @api_client.config.client_side_validation && job.nil?
        fail ArgumentError, "Missing the required parameter 'job' when calling BuildControllerApi.v3_get_builds_using_get"
      end
      # resource path
      local_var_path = '/v3/builds/{buildMaster}/builds'.sub('{' + 'buildMaster' + '}', build_master.to_s)

      # query parameters
      query_params = {}
      query_params[:'job'] = job

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#v3_get_builds_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get job config
    # @param build_master buildMaster
    # @param job job
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def v3_get_job_config_using_get(build_master, job, opts = {})
      data, _status_code, _headers = v3_get_job_config_using_get_with_http_info(build_master, job, opts)
      data
    end

    # Get job config
    # @param build_master buildMaster
    # @param job job
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def v3_get_job_config_using_get_with_http_info(build_master, job, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.v3_get_job_config_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.v3_get_job_config_using_get"
      end
      # verify the required parameter 'job' is set
      if @api_client.config.client_side_validation && job.nil?
        fail ArgumentError, "Missing the required parameter 'job' when calling BuildControllerApi.v3_get_job_config_using_get"
      end
      # resource path
      local_var_path = '/v3/builds/{buildMaster}/job'.sub('{' + 'buildMaster' + '}', build_master.to_s)

      # query parameters
      query_params = {}
      query_params[:'job'] = job

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#v3_get_job_config_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get jobs for build master
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def v3_get_jobs_for_build_master_using_get(build_master, opts = {})
      data, _status_code, _headers = v3_get_jobs_for_build_master_using_get_with_http_info(build_master, opts)
      data
    end

    # Get jobs for build master
    # @param build_master buildMaster
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def v3_get_jobs_for_build_master_using_get_with_http_info(build_master, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BuildControllerApi.v3_get_jobs_for_build_master_using_get ...'
      end
      # verify the required parameter 'build_master' is set
      if @api_client.config.client_side_validation && build_master.nil?
        fail ArgumentError, "Missing the required parameter 'build_master' when calling BuildControllerApi.v3_get_jobs_for_build_master_using_get"
      end
      # resource path
      local_var_path = '/v3/builds/{buildMaster}/jobs'.sub('{' + 'buildMaster' + '}', build_master.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BuildControllerApi#v3_get_jobs_for_build_master_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
