=begin
#Spinnaker API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module SwaggerClient
  class LoadBalancerControllerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve a list of load balancers for a given cloud provider
    # @param [Hash] opts the optional parameters
    # @option opts [String] :provider provider (default to aws)
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<Object>]
    def get_all_using_get(opts = {})
      data, _status_code, _headers = get_all_using_get_with_http_info(opts)
      data
    end

    # Retrieve a list of load balancers for a given cloud provider
    # @param [Hash] opts the optional parameters
    # @option opts [String] :provider provider
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_all_using_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerControllerApi.get_all_using_get ...'
      end
      # resource path
      local_var_path = '/loadBalancers'

      # query parameters
      query_params = {}
      query_params[:'provider'] = opts[:'provider'] if !opts[:'provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-RateLimit-App'] = opts[:'x_rate_limit_app'] if !opts[:'x_rate_limit_app'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerControllerApi#get_all_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a list of load balancers for a given application
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<Object>]
    def get_application_load_balancers_using_get(application, opts = {})
      data, _status_code, _headers = get_application_load_balancers_using_get_with_http_info(application, opts)
      data
    end

    # Retrieve a list of load balancers for a given application
    # @param application application
    # @param [Hash] opts the optional parameters
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_application_load_balancers_using_get_with_http_info(application, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerControllerApi.get_application_load_balancers_using_get ...'
      end
      # verify the required parameter 'application' is set
      if @api_client.config.client_side_validation && application.nil?
        fail ArgumentError, "Missing the required parameter 'application' when calling LoadBalancerControllerApi.get_application_load_balancers_using_get"
      end
      # resource path
      local_var_path = '/applications/{application}/loadBalancers'.sub('{' + 'application' + '}', application.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-RateLimit-App'] = opts[:'x_rate_limit_app'] if !opts[:'x_rate_limit_app'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerControllerApi#get_application_load_balancers_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer's details as a single element list for a given account, region, cloud provider and load balancer name
    # @param account account
    # @param region region
    # @param name name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :provider provider (default to aws)
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<Object>]
    def get_load_balancer_details_using_get(account, region, name, opts = {})
      data, _status_code, _headers = get_load_balancer_details_using_get_with_http_info(account, region, name, opts)
      data
    end

    # Retrieve a load balancer&#39;s details as a single element list for a given account, region, cloud provider and load balancer name
    # @param account account
    # @param region region
    # @param name name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :provider provider
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<(Array<Object>, Fixnum, Hash)>] Array<Object> data, response status code and response headers
    def get_load_balancer_details_using_get_with_http_info(account, region, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerControllerApi.get_load_balancer_details_using_get ...'
      end
      # verify the required parameter 'account' is set
      if @api_client.config.client_side_validation && account.nil?
        fail ArgumentError, "Missing the required parameter 'account' when calling LoadBalancerControllerApi.get_load_balancer_details_using_get"
      end
      # verify the required parameter 'region' is set
      if @api_client.config.client_side_validation && region.nil?
        fail ArgumentError, "Missing the required parameter 'region' when calling LoadBalancerControllerApi.get_load_balancer_details_using_get"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling LoadBalancerControllerApi.get_load_balancer_details_using_get"
      end
      # resource path
      local_var_path = '/loadBalancers/{account}/{region}/{name}'.sub('{' + 'account' + '}', account.to_s).sub('{' + 'region' + '}', region.to_s).sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'provider'] = opts[:'provider'] if !opts[:'provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-RateLimit-App'] = opts[:'x_rate_limit_app'] if !opts[:'x_rate_limit_app'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerControllerApi#get_load_balancer_details_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Retrieve a load balancer for a given cloud provider
    # @param name name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :provider provider (default to aws)
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Hash<String, Object>]
    def get_load_balancer_using_get(name, opts = {})
      data, _status_code, _headers = get_load_balancer_using_get_with_http_info(name, opts)
      data
    end

    # Retrieve a load balancer for a given cloud provider
    # @param name name
    # @param [Hash] opts the optional parameters
    # @option opts [String] :provider provider
    # @option opts [String] :x_rate_limit_app X-RateLimit-App
    # @return [Array<(Hash<String, Object>, Fixnum, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_load_balancer_using_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LoadBalancerControllerApi.get_load_balancer_using_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling LoadBalancerControllerApi.get_load_balancer_using_get"
      end
      # resource path
      local_var_path = '/loadBalancers/{name}'.sub('{' + 'name' + '}', name.to_s)

      # query parameters
      query_params = {}
      query_params[:'provider'] = opts[:'provider'] if !opts[:'provider'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['*/*'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'X-RateLimit-App'] = opts[:'x_rate_limit_app'] if !opts[:'x_rate_limit_app'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, Object>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LoadBalancerControllerApi#get_load_balancer_using_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
